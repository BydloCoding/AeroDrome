from vk_api import keyboard
from SDK.timeExtension import Timestamp
from SDK.database import db, Struct, ProtectedProperty
from SDK.cmd import command, set_after, after_func
from SDK.keyboard import Keyboard
import math, re

class User(Struct):
    def __init__(self, *args, **kwargs):
        self.save_by = ProtectedProperty("user_id")
        self.table_name = ProtectedProperty("users")
        self.user_id = ""
        self.paper_clips = 0
        self.keys = 0
        self.pencils = 0
        self.payed_out = 0.0
        self.inventory = []
        self.total_earned = 0
        super().__init__(*args, **kwargs)

airplanes = [
    {
        "id": 0,
        "level": 1,
        "per_hour": 100,
        "price": 1000
    },
    {
        "id": 1,
        "level": 2,
        "per_hour": 600,
        "price": 5000
    },
    {
        "id": 2,
        "level": 3,
        "per_hour": 3200,
        "price": 25_000
    },
    {
        "id": 3,
        "level": 4,
        "per_hour": 14_000,
        "price": 100_000
    },
    {
        "id": 4,
        "level": 5,
        "per_hour": 80_000,
        "price": 500_000
    },
    {
        "id": 5,
        "level": 6,
        "per_hour": 200_000,
        "price": 1_000_000
    }
]

#—Å–∫—Ä–µ–ø–∫–∏ üß∑ –∫–ª—é—á–∏ üîë –∫–∞—Ä–∞–Ω–¥–∞—à–∏ ‚úè üöÄ ‚úà üé≤ ‚è™ üìä

menu_kb = Keyboard({"‚úà–ú–æ–∏ —Å–∞–º–æ–ª–µ—Ç—ã": "white", "üíº–ö—É–ø–∏—Ç—å —Å–∞–º–æ–ª–µ—Ç": "white", "0":"line", "‚úè–ë–∞–ª–∞–Ω—Å": "white", "üöÄ–û–±–º–µ–Ω–Ω–∏–∫":"white", "01":"line","‚öô–û–ø—Ü–∏–∏":"green"})

def toMenu(self):
    self.reply("–ü–æ–∫—É–ø–∞–π —Å–∞–º–æ–ª–µ—Ç—ã –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –¥–µ–Ω—å–≥–∏!", keyboard = menu_kb)
    self.set_after("handle_menu")

@after_func("handle_menu")
def handle_menu(self):
    user_profile = self.db.select_one_struct("select * from users where user_id = ?", [self.user.id])
    if self.text == "‚úà–º–æ–∏ —Å–∞–º–æ–ª–µ—Ç—ã":
        all_collected = 0
        collecting_per_hour = 0
        m = "–≠—Ç–æ –≤–∞—à–∏ —Å–∞–º–æ–ª–µ—Ç—ã, –æ–Ω–∏ –ø—Ä–∏–Ω–æ—Å—è—Ç üß∑, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å –∏ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å –≤ –æ–±–º–µ–Ω–Ω–∏–∫–µ üöÄ.\n\n"
        cur_time = Timestamp().get_time()
        for airplane in airplanes:
            cur_count = 0
            cur_collected = 0
            for j in user_profile.inventory:
                if j["type"] == "airplane" and airplane["id"] == j["id"]:
                    cur_count += 1
                    collecting_per_hour += airplane["per_hour"]
                    h =  math.floor(((cur_time - j["last_collected"]) / 60) * (airplane["per_hour"] / 60))
                    cur_collected += h
                    all_collected += h
            if cur_count != 0:
                m += f"‚úà–°–∞–º–æ–ª–µ—Ç {airplane['id']+1} —É—Ä.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {cur_count}\n–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {cur_collected}\n\n"
        m += f"üß∑–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞: {all_collected}\nüìä–í–∞—à–∏ —Å–∞–º–æ–ª–µ—Ç—ã –ø—Ä–∏–Ω–æ—Å—è—Ç {collecting_per_hour}üß∑ –≤ —á–∞—Å"
        self.reply(m, keyboard = Keyboard({"üß∑–°–æ–±—Ä–∞—Ç—å —Å–∫—Ä–µ–ø–∫–∏":"green", "‚è™–ù–∞–∑–∞–¥":"white"}, strategy="insert_lines"))
        self.set_after("handle_collect")
    elif self.text == "üíº–∫—É–ø–∏—Ç—å —Å–∞–º–æ–ª–µ—Ç":
        k = Keyboard(strategy="insert_lines")
        for airplane in airplanes:
            k.add_button(f"–°–∞–º–æ–ª–µ—Ç {airplane['id']+1} —É—Ä. ({airplane['per_hour']}üß∑/—á–∞—Å) - {airplane['price']}üîë", color = Keyboard.colors["blue"])
        k.add_button("‚è™ –ù–∞–∑–∞–¥", color = Keyboard.colors["red"])
        self.reply("–¢—É—Ç –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å —Å–∞–º–æ–ª–µ—Ç—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª—å—à–µ —Å–∫—Ä–µ–ø–æ–∫üß∑", keyboard = k)
        self.set_after("handle_buy_airplane")
    elif self.text == "‚úè–±–∞–ª–∞–Ω—Å":
        self.reply(f"‚úè–ë–∞–ª–∞–Ω—Å\n\n–°–∫—Ä–µ–ø–∫–∏: {user_profile.paper_clips}üß∑\n–ö–ª—é—á–∏: {user_profile.keys}üîë\n–ö–∞—Ä–∞–Ω–¥–∞—à–∏: {user_profile.pencils}‚úè", keyboard = Keyboard({"‚úè–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å":"green","üîë–í—ã–≤–æ–¥":"red", "‚è™–ù–∞–∑–∞–¥":"blue"}, strategy="insert_lines"))
        self.set_after("handle_balance")
    elif self.text == "üöÄ–æ–±–º–µ–Ω–Ω–∏–∫":
        self.reply(f"üöÄ–ö—É—Ä—Å –æ–±–º–µ–Ω–∞\n\n100 —Å–∫—Ä–µ–ø–æ–∫üß∑ - 1 –∫–ª—é—áüîë\n\n–ü–æ—Å–ª–µ –æ–±–º–µ–Ω–∞ –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–æ {user_profile.paper_clips // 100} –∫–ª—é—á–µ–πüîë. –í—ã —Å–æ–≥–ª–∞—Å–Ω—ã –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–±–º–µ–Ω?", keyboard = Keyboard({"–î–∞": "green", "–ù–µ—Ç":"red"}))
        self.set_after("handle_convert")
    elif self.text == "‚öô–æ–ø—Ü–∏–∏":
        self.reply(f"‚öô–û–ø—Ü–∏–∏\n\n‚úà–ê—ç—Ä–æ–¥—Ä–æ–º\nüë®‚Äçüë®‚Äçüë¶‚Äçüë¶{len(self.db.select('select * from users'))} –≤ –∏–≥—Ä–µ\n–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: {user_profile.total_earned}üß∑\n–í—ã –≤—ã–≤–µ–ª–∏: {user_profile.payed_out:.2f}", keyboard = Keyboard({"–ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤":"white","‚è™–ù–∞–∑–∞–¥":"red"}, strategy="insert_lines"))
        self.set_after("handle_options")
    else:
        self.reply("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞!")
        return True

@after_func("handle_balance")
def handle_balance(self):
    if self.text == "‚úè–ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å":
        self.reply("‚úè–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:\n1‚úè - 2‚ÇΩ\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.", keyboard = Keyboard({"300 ‚ÇΩ":"green","500 ‚ÇΩ":"green","0":"line","150 ‚ÇΩ":"blue","200 ‚ÇΩ":"blue", "250 ‚ÇΩ": "blue", "1": "line", "750 ‚ÇΩ": "blue", "1000 ‚ÇΩ":"blue", "1500 ‚ÇΩ":"blue","2":"line", "‚è™–ù–∞–∑–∞–¥":"red"}))
        self.set_after("handle_payment")
    elif self.text == "üîë–≤—ã–≤–æ–¥":
        self.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É", keyboard = Keyboard({"QIWI –ö–æ—à–µ–ª–µ–∫":"blue", "–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞": "blue", "–ë–∞–ª–∞–Ω—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞":"blue", "–ÆMoney":"blue", "‚è™–ù–∞–∑–∞–¥":"red"}, strategy="insert_lines"))
        self.set_after("choose_payment_system")
    else:
        toMenu(self)
        

@after_func("choose_payment_system")
def choose_payment_system(self):
    if self.text == "‚è™–Ω–∞–∑–∞–¥": 
        toMenu(self)
        return False
    user_profile = self.db.select_one_struct("select * from users where user_id = ?", [self.user.id])
    if user_profile.pencils >= 75 and user_profile.keys / 100 >= 10000:
        self.reply("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç", keyboard = Keyboard({"‚è™–ù–∞–∑–∞–¥":"red"}))
        self.set_after("withdraw")
    else:
        self.reply("–î–ª—è –≤—ã–≤–æ–¥–∞ —É –í–∞—Å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 75 ‚úè –∏ 10000üîë", keyboard = Keyboard({"‚úè–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å":"green","‚è™–ù–∞–∑–∞–¥":"red"},strategy="insert_lines"))
        self.set_after("handle_balance")

@after_func("withdraw")
def withdraw(self):
    if self.text == "‚è™–Ω–∞–∑–∞–¥": 
        toMenu(self)
        return False
    else:
        user_profile = self.db.select_one_struct("select * from users where user_id = ?", [self.user.id])
        self.reply(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞\n\n–°–µ–π—á–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ {(user_profile.keys / 100):.2f} ‚ÇΩ", keyboard = Keyboard({"‚è™–ù–∞–∑–∞–¥":"red"}))
        self.set_after("withdraw_part_2")


@after_func("withdraw_part_2")
def withdraw_part_2(self):
    user_profile = self.db.select_one_struct("select * from users where user_id = ?", [self.user.id])
    numbers = re.findall("\d+\.\d+", self.text)
    can_withdraw = user_profile.pencils / 100
    if not numbers or float(numbers[0]) > can_withdraw:
        self.reply("–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–∞ —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞!")
        return True
    else:
        should_withdraw = float(numbers[0])
        user_profile.pencils -= 75
        user_profile.payed_out += should_withdraw
        self.reply("–î–µ–Ω—å–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤—ã–≤–æ–¥!")
        toMenu(self)

@after_func("handle_payment")
def handle_payment(self):
    if self.text == "‚è™–Ω–∞–∑–∞–¥": toMenu(self)
    else:
        numbers = re.findall(r'\d+', self.text)
        if not numbers: 
            self.reply("–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞!")
            return True
        kb = Keyboard(inline=True)
        kb.add_openlink_button(label="‚úÖ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", link=f"https://qiwi.com/payment/form/99?extra%5B%27account%27%5D={self.qiwi_wallet}&amountInteger={numbers[0]}&amountFraction=0&extra%5B%27comment%27%5D={self.user.id}&currency=643&blocked[0]=account&blocked[1]=comment")
        self.reply("–î–ª—è –¥–æ–Ω–∞—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ", keyboard = kb)
        toMenu(self)
    

@after_func("handle_options")
def handle_options(self):
    if self.text == "‚è™–Ω–∞–∑–∞–¥":
        toMenu(self)
    else:
        self.reply("–í—ã –µ—â–µ –Ω–∏ —Ä–∞–∑—É –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–ª–∏ –≤—ã–≤–æ–¥.", keyboard=menu_kb)
        self.set_after("handle_menu")

@after_func("handle_convert")
def handle_convert(self):
    if self.text == "–Ω–µ—Ç": toMenu(self)
    else:
        user_profile = self.db.select_one_struct("select * from users where user_id = ?", [self.user.id])
        paper_clips = user_profile.paper_clips
        gained = paper_clips // 100
        user_profile.keys += gained
        user_profile.paper_clips -= gained * 100
        self.reply(f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {gained} –∫–ª—é—á–µ–πüîë –≤–∑–∞–º–µ–Ω –Ω–∞ {gained * 100} —Å–∫—Ä–µ–ø–æ–∫", keyboard=menu_kb)
        self.set_after("handle_menu")

@after_func("handle_buy_airplane")
def handle_buy_airplane(self):
    user_profile = self.db.select_one_struct("select * from users where user_id = ?", [self.user.id])
    if self.text == "‚è™ –Ω–∞–∑–∞–¥": toMenu(self)
    else:
        numbers = re.findall(r'\d+', self.text)
        if not numbers or int(numbers[0]) > len(airplanes):
            self.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Å–∞–º–æ–ª–µ—Ç–∞!")
            toMenu(self)
        elif user_profile.keys < airplanes[int(numbers[0])-1]["price"]:
            self.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª—é—á–µ–πüîë –¥–ª—è –ø–æ–∫—É–ø–∫–∏!")
            toMenu(self)
        else:
            self.reply(f"–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í—ã –∫—É–ø–∏–ª–∏ —Å–∞–º–æ–ª–µ—Ç {int(numbers[0])} —É—Ä–æ–≤–Ω—è.", keyboard = menu_kb)
            self.set_after("handle_menu")
            airplane = int(numbers[0])-1
            user_profile.keys -= airplanes[airplane]["price"]
            user_profile.inventory.append({"type": "airplane", "last_collected": Timestamp().get_time(), "id": airplane})

@after_func("handle_collect")
def handle_collect(self):
    if self.text == "üß∑—Å–æ–±—Ä–∞—Ç—å —Å–∫—Ä–µ–ø–∫–∏":
        user_profile = self.db.select_one_struct("select * from users where user_id = ?", [self.user.id])
        collected: int = 0
        cur_time = Timestamp().get_time()
        for airplane in user_profile.inventory:
            if airplane["type"] == "airplane":
                from_list = airplanes[airplane["id"]]
                collected += math.floor(((cur_time - airplane["last_collected"]) / 60) * (from_list["per_hour"] / 60))
        if collected != 0:
            for airplane in user_profile.inventory:
                if airplane["type"] == "airplane":
                    airplane["last_collected"] = cur_time
            user_profile.paper_clips += collected
            user_profile.total_earned += collected
            self.reply(f"–°–∫—Ä–µ–ø–∫–∏ —Å–æ–±—Ä–∞–Ω—ã!\n\n–í—ã —Å–æ–±—Ä–∞–ª–∏: {collected} üß∑\n\n–°–æ–±—Ä–∞–Ω–Ω—ã–µ —Å–∫—Ä–µ–ø–∫–∏ –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ üîë –≤ –æ–±–º–µ–Ω–Ω–∏–∫–µ üöÄ")
            toMenu(self)
        else:
            self.reply("–ü—Ä–∏–±—ã–ª—å –æ—Ç —Å–∞–º–æ–ª–µ—Ç–æ–≤ –ø–æ–∫–∞ —á—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            toMenu(self)
    elif self.text == "‚è™–Ω–∞–∑–∞–¥": toMenu(self)


        

@command("–Ω–∞—á–∞—Ç—å")
def hi(self, args):
    s = self.db.select_one_struct("select * from users where user_id = ?", [self.user.id])
    if s is None:
        self.reply(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É!\nüéÅ–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –∏–≥—Ä—ã - –°–∞–º–æ–ª–µ—Ç –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–æ—Å–∏—Ç {airplanes[0]['per_hour']} üß∑ –≤ —á–∞—Å!", keyboard = menu_kb)
        User(self.db, user_id = self.user.id, inventory = [{"type": "airplane", "last_collected": Timestamp().get_time(), "id": airplanes[0]["id"]}])
        self.set_after("handle_menu")
    else:
        toMenu(self)